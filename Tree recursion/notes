
Q: What is 'Inverse Cascade'?
A: It is a function which grows first then shrinks.
1
12
123
12
1

# Example: Inverse Cascade
def cascade(n):
  print(n)
  if n >= 10:
    cascade(n//10)
    print(n)


Q: What is 'Tree Recursion'?
A: Tree recursion happens when one function makes more than one recursive call.

Example:

1. Fibonacci sequence:

n:      0, 1, 2, 3, 4, 5 ...
fib(n): 0, 1, 1, 2, 3, 5 ...

# Example: Fibonacci sequence
def fib(n):
  if n == 1:
    return 0
  if n == 2:
    return 1
  else:
    return fib(n-2) + fib(n-1)

result = fib(n)

This process is highly repetitive.
'fib' is called on the same argument multiple times.

2. Counting Partitions
  The number of partitions of a positive integer n, using parts up to size m,
  is the number of ways in which n can be expressed as the sum of positive 
  integer parts up to m in increasing order.
  
  Explore two possibilities:
  Use at least one 4
  Don't use any 4
  
  Solve two simpler problems:
  count_partitions(2, 4)
  count_partitions(6, 3)
  This divided method is not unique, but it shows how the two parameters of this function change. 
  That is beneficial to make tree recursive calls.
  
  Tree recursion often involves exploring different choices.
  
  # Example: counting partitions
  def count_partitions(n, m):
    if n == 0:
      return 1
    elif n < 0:
      return 0
    elif m == 0:
      return 0
    else:
      with_m = count_partitions(n-m, m)
      without_m = count_partitions(n, m-1)
      return with_m + without_m
      
      
Q: What is the difference between Recursion and Iteration?
A: 
  Iteration: Iteration function is one that loops to repeat some part of the code.
  Recursion: Recursion function is one that calls itself again to repeat the code.

  # Example: Method to find factorial of given number
  # ----- Iteration -----
  def fact_iter(n):
    result = 1
      for i in range(2, n+1):
        result *= i
       return result
       
  # ----- Recursion -----
  def fact_rec(n):
    if n == 0:
      return 1
    else:
      return n * fact_rec(n-1)
      
   Some more details:
   Termination: 
      Recursion: It depends on base case.
      Iteration: It depends on the condition of iteration.
   Usage:
      Recursion: Always used when time complexity is lower.
      Iteration: Always used when time complexity is higher.
  
