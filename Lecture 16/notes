1. Iterators
  A container can provide an iterator that provides access to its elements in some order.
  iter(iterable): Return an iterator over the elements of an iterable value
  next(iterator): Return the next element in an iterator

2. View of a Dictionary
  >>> d ={'one':1, 'two': 2}
  >>> k = iter(d.keys())
  >>> next(k)
  'one'
  >>>next(k)
  'two'
  
  >>> v = iter(d.values())
  >>> next(v)
  1
  >>> nest(v)
  2
  
  >>> i = iter(d.items())
  >>> next(i)
  ('one', 1)
  >>> next(i)
  ('two', 2)
  
  >>> d = {'one': 1,'two': 2}
  >>> k =iter(d)
  >>> next(k)
  'one'
  >>> next(k)
  'two'  

3. For Statements
  >>> r = range(3, 6)
  >>> list(r)
  [3, 4, 5]
  >>> for i in r:
  ...     print(i)
  ...
  3
  4
  5
  
  >>> ri = iter(r)
  >>> ri
  >>> next(ri)
  3
  
  >>> r
  range(3, 6)
  >>> ri = iter(r)
  >>> for i in ri:
  ...     print(i)
  ...
  3
  4
  5
  >>> for i in ri:
  ...     print(i)
  ...
  
  If we use an iterator in a for statement, I can still go through all of 
  the elements until I reach the end.
  But that will advance the iterator so that I can't use it again.
  

4. Built-in Iterator Functions
  Take in one iterable value and give you back an iterator.
  map(func, iterable): # Iterate over func(x) for x in iterable
  filter(func, iterable): # Iterate over x in iterable if func(x)
  zip(first_iter, second_iter): # Iterate over co-indexed (x, y) pairs
  reversed(sequence): # Iterate over x in a sequence in reverse order
  
  To view the contents of an iterator, place the resulting elements into a container.
  list(iterable): # Create a list containing all x in iterable
  tuple(iterable): # Create a tuple containing all x in iterable
  sorted(iterable): # Create a sorted list containing x in iterable
  
  >>> bc = ['b', 'c']
  >>> [x.upper() for x in bc]
  ['B', 'C']
  >>> map(lambda x: x.upper(), bc)
  <map object>
  >>> m = map(lambda x: x.upper(), bc)
  >>> next(m)
  'B'
  >>> next(m)
  'C'
  >>> next(m)
  StopIteration
  
  def double(x):
    print('**', x, '=>', 2*x, '**')
    return 2*x
  
  >>> map(double, [3, 5])
  <map object>
  >>> m = map(double, [3, 5])
  >>> next(m)
  ** 3 => 6 **
  6
  
  >>> m = map(double, range(3, 7))
  >>> f = lambda y: y >= 8
  >>> t = filter(f, m)
  >>> next(t)
  ** 3 => 6 **
  ** 4 => 8 **
  8
  
  >>> d = {'a': 1, 'b': 2}
  >>> d
  {'b': 2, 'a': 1}
  >>> items = iter(d.items())
  >>> next(items)
  ('b', 2)

5. Zip
  The built-in zip function returns an iterator over co-indexed tuples.
  >>> list(zip([1, 2], [3, 4]))
  [(1, 3), (2, 4)]
  
  If one iterable is longer than the other, zip only iterates over matches and skips extras.
  >>> list(zip([1, 2], [3, 4, 5]))
  [(1, 3), (2, 4)]
  
  Implement palindrome, which returns whether s is the same forward and backward.
  >>> palindrome([3, 1, 4, 1, 3])
  True
  
6. Using Iterators
  Example: Casino Blackjack
  
  
  
