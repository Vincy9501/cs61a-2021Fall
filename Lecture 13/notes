1. Trees
  Trees are an important data abstraction for representing hierarchical relationships.
  A tree has a root lable and a list of branches.
  Each branch is a tree.
  
  def tree(lable, branches=[]):
    for branch in branches:
      assert is_tree(branch)
    return [label] + list(branches)
  
  def label(tree):
    return tree[0]
    
  def branches(tree):
    return tree[1:]
    
  def is_tree(tree):
    if type(tree) != list or len(tree) < 1:
      return False
    for branch in branches(tree):
      if not is_tree(branch):
        return False
    return True
  
 2. Tree Processing
  def fib_tree(n):
    if n <= 1:
      return tree(n)
    else:
      left, right = fib_tree(n-2), fib_tree(n-1)
      return tree(label(left) + label(right), [left, right])
      
   Uses Recursion:
    Processing a leaf is often the base case of a tree processing function
      def count_leaves(t):
        if is_leaf(t):
          return 1
        else:
          branch_counts = [count_leaves(b) for b in branches(t)]
          return sum(branch_counts)
      
      def leaves(tree):
        if is_leaf(tree):
          return [lable(tree)]
        else:
          return sum(leaves(b) for b in branches(tree), [])
          
  Creating Trees:
    def increment_leaves(t):
     """Return a tree like t but with leaf labels incremented."""
      if is_leaf(t):
        return tree(lable(t)+1)
      else:
        bs = [increment_leaves(b) for b in branches(t)]
        return tree(label(t), bs)
        
    def increment(t):
      """ Return a tree like t but with all labels incremented."""
      return tree(lable(t)) + 1, [increment(b) for b in branches(t)]

3. Example: Printing Trees
  def print_tree(t, indent=0)
    print(' ' * indent + str(label(t)))
    for b in branches(t):
      print_tree(b, indent + 1)
 >>> print_tree(fib_tree(4))
 3
  1
    0
    1
  2
    1
    1
      0
      1
4. Example: Summing Paths
  numbers = tree(3, [tree(4), tree(5, [tree(6)])])
  
  def print_sums(t, so_far):
    so_far = so_far + label(t)
    if is_leaf(t):
      print(so_far)
    else:
      for b in branches(t):
        print_sums(b, so_far)
  >>> print_sums(numbers, 0)
  7
  14
  
5. Counting Paths
  def count_paths(t, total):
    t = tree(3, [tree(-1), tree(1, [tree(2, [tree(1)]), tree(1, [tree(-1)])])])
    if label(t) == total:
      found = 1
    else:
      found = 0
    return found + sum ([ count_paths(b, total -label(t)) for b in branches(t)])
    
