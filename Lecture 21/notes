1. Linked Lists
A linked list is either empty or a first value and the rest of the linked list

class Link:
  def __init__(self, first, rest=empty)
    assert rest is Link.empty or isinstance(rest, Link)
  self.first = first
  self.rest = rest

help(isinstance): Return whether an object is an instance of a class or of a subclass thereof.

2. Linked List Processing
Example: Range,Map, and Filter for Linked Lists
square,odd = lambda x: x * Ã—, lambda x: x % 2 == 1
list(map(square, filter(odd, range(1, 6))))    # [1, 9, 25]
map,link(square, filter_link(odd, range_link(1, 6)))

def range_link(start, end):
"""Return a Link containing consecution integers from start to end."""
  if start >= end:
    return Link.empty
  else:
    return Link(start, range_Link(start + 1, end))
    
def map_link(f, s):
"""Return a Link that contains f(x) for each x in Link s.""
  if s is Link.empty:
    return s
  else:
    return Link(f(s.first), map_Link(f, s.rest))

def fliter_link(f, s):
"""Return a Link that contains only the elements x of Link s for which f(x)
is a true value."""
  if s is Link.empty:
    return s
  filtered_rest = fliter_Link(f, s.rest)
  if f(s.first):
    return Link(f(s.first), flitered_rest))
  else:
    return filtered_rest
    
3. Linked List Mutation
>>> s = Link(1, Link(2, Link(3)))
>>> s.first = 5
>>> t = s.rest
>>> t.rest = s
>>> s.first
5
>>> s.rest.rest.rest.rest.rest.first

4. Linked List Mutation Example
def add(s, v):

>>> s = Link(1, Link(3, Link(5)))
>>> add(s, 0)
Link(0, (1, Link(3, Link(5))))

  assert s is not List.empty
  if s.first > v:
    s.first, s.rest = v, Link(s.first, s.rest)
  elif s.first < v and empty(s.rest):
    s.rest = Link(v)
  elif s.first < v:
    add(s.rest, v)
  return s
  
5. Tree Class
class Tree:
  def __init__(self, label, branches=[]):
    self.label = label
    for branch in branches:
      assert isinstance(branch, Tree)
    self.branches = list(branches)
     
  def fib_tree(n)L
    if n == 0 or n ==1:
      return Tree(n)
    else:
      left = fib_tree(n-2)
      right = fib_tree(n-1)
      fib_n = left.label + right.label
      return tree(fib_n, [left, right])
 

# data abstraction

def tree(label, branches=[]):
  for branch in branches :
    assert is_tree( branch)
  return [label] + list(branches)
  
def label(tree) :
  return tree[0]
  
def branches(tree):
  return tree[1:]

def fib_tree(n) :
  if n == 0 or n == 1:
    return tree(n)
  else:
    left = fib_tree(n-2)
    right = fib_tree(n-1)
  fib_n = label(left) + label(right)
  return tree(fib_n,  [left, right])

6. Tree Mutation
Example: Pruning Trees
Removing subtrees from a tree is called pruning
Prune branches before recursive processing

def prune(t, n):
  t.branches = [ b for b in t.branches if b.label != n]
  for b in t.branches:
    prune(b, n)


